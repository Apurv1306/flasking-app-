name: Android APK Build

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch
  workflow_dispatch: # Allows manual triggering of the workflow from GitHub UI

jobs:
  build:
    runs-on: ubuntu-latest # Use a fresh Ubuntu environment for each build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Checkout your repository code

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' # Specify a Python version compatible with Kivy/Buildozer

      - name: Install Buildozer and Cython
        run: pip install buildozer cython # Install Buildozer and Cython (a common dependency)

      # Add Java setup, as it's required for Android SDK tools
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # Or 'zulu', 'adopt', 'microsoft'
          java-version: '17' # Android SDK often requires Java 11 or 17

      # Install Android SDK Build-Tools and platform-tools
      # This step explicitly ensures aidl and other tools are available
      - name: Install Android SDK Build-Tools
        run: |
          # Define SDK path and create directory
          export ANDROID_SDK_ROOT="$HOME/.android/sdk"
          mkdir -p "$ANDROID_SDK_ROOT"
          echo "Created SDK directory: $ANDROID_SDK_ROOT"

          # Download and install command-line tools
          echo "Downloading command-line tools..."
          # Updated URL for the latest command-line tools
          wget https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -O /tmp/commandlinetools.zip
          echo "Unzipping command-line tools..."
          unzip /tmp/commandlinetools.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"
          
          echo "Contents of $ANDROID_SDK_ROOT/cmdline-tools after unzip:"
          ls -R "$ANDROID_SDK_ROOT/cmdline-tools"

          # Move extracted contents to the 'latest' directory as expected by sdkmanager
          # The zip extracts to cmdline-tools/cmdline-tools/
          # We want it to be $ANDROID_SDK_ROOT/cmdline-tools/latest/
          mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          echo "Moved cmdline-tools to latest."
          
          echo "Contents of $ANDROID_SDK_ROOT/cmdline-tools/latest after move:"
          ls -R "$ANDROID_SDK_ROOT/cmdline-tools/latest"

          # Set ANDROID_HOME and update PATH for this step and subsequent steps
          echo "Setting ANDROID_HOME and PATH..."
          echo "ANDROID_HOME=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          echo "PATH=$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools:$PATH" >> $GITHUB_ENV
          export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools:$PATH" # For current shell
          echo "Current PATH: $PATH"
          echo "Current ANDROID_HOME: $ANDROID_HOME"

          # Create licenses directory and accept licenses directly
          echo "Accepting Android SDK licenses by creating license file..."
          mkdir -p "$ANDROID_SDK_ROOT/licenses"
          echo "8933cc444bbd51ba6c970b55a4087e1e8557e4e1" > "$ANDROID_SDK_ROOT/licenses/android-sdk-licenses"
          echo "d975f743f9cdb82fc1498d32dc2c07937dd647f9" >> "$ANDROID_SDK_ROOT/licenses/android-sdk-licenses" # Add more common license hashes if needed
          echo "All SDK package licenses accepted (via file creation)."
          
          # Install specific Android SDK components using the full path to sdkmanager
          # Reverting build-tools to 33.0.2 to match android.api = 33 in buildozer.spec
          echo "Installing platform-tools, platforms;android-33, build-tools;33.0.2..."
          "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" "platform-tools" "platforms;android-33" "build-tools;33.0.2"
          echo "SDK components installation complete."
        shell: bash

      - name: Create buildozer.spec
        run: |
          # Create the buildozer.spec file directly in the workflow
          # This ensures the correct spec is used for the build
          cat <<EOF > buildozer.spec
          [app]
          title = FaceApp Attendance
          package.name = faceappattendance
          package.domain = org.kivy
          version = 0.1
          requirements = python3, kivy==2.2.1, flask, flask-cors, numpy, opencv, requests
          source.dir = .
          source.include_exts = py, png, jpg, xml, json, mp3
          source.include_patterns = haarcascade_frontalface_default.xml, known_faces/*, user_emails.json, daily_attendance.json
          android.permissions = INTERNET, ACCESS_NETWORK_STATE, ACCESS_WIFI_STATE, READ_EXTERNAL_STORAGE, WRITE_EXTERNAL_STORAGE
          android.api = 33
          android.minapi = 24
          android.archs = arm64-v8a, armeabi-v7a
          fullscreen = 0
          orientation = portrait

          [buildozer]
          log_level = 2
          data_dir = ./.buildozer
          global_data_dir = ~/.buildozer
          EOF
        shell: bash

      - name: Run Buildozer (Android Debug Build)
        run: buildozer android debug # This command will build the debug APK
        # Buildozer will download necessary SDKs, NDKs, and other tools.
        # This step can take a significant amount of time on the first run.

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: faceapp-apk
          path: bin/*.apk # Upload the generated APK from the 'bin' directory
          retention-days: 5 # Keep the artifact for 5 days
