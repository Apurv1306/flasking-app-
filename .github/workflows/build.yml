name: Android APK Build

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch
  workflow_dispatch: # Allows manual triggering of the workflow from GitHub UI

jobs:
  build:
    runs-on: ubuntu-latest # Use a fresh Ubuntu environment for each build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Checkout your repository code

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' # Specify a Python version compatible with Kivy/Buildozer

      - name: Install Buildozer and Cython
        run: pip install buildozer cython # Install Buildozer and Cython (a common dependency)

      # Add Java setup, as it's required for Android SDK tools like sdkmanager
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # Or 'zulu', 'adopt', 'microsoft'
          java-version: '17' # Android SDK often requires Java 11 or 17

      - name: Manually Setup Android SDK for Buildozer's Expected Paths
        run: |
          # Define the exact SDK root path that Buildozer expects
          export ANDROID_SDK_ROOT="$HOME/.buildozer/android/platform/android-sdk"
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          
          # Create the main SDK directory
          mkdir -p "$ANDROID_SDK_ROOT"
          echo "Created SDK directory: $ANDROID_SDK_ROOT"

          # Download the latest Android command-line tools to a temporary location
          echo "Downloading command-line tools..."
          wget https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -O /tmp/commandlinetools.zip
          echo "Unzipping command-line tools to temporary location..."
          unzip /tmp/commandlinetools.zip -d /tmp/android-cmdline-tools-extracted
          
          # Create the 'tools/bin' structure within Buildozer's expected SDK_ROOT
          # This is the *old* path Buildozer seems to be hardcoded to check
          mkdir -p "$ANDROID_SDK_ROOT/tools/bin"
          echo "Created $ANDROID_SDK_ROOT/tools/bin"

          # Move the actual cmdline-tools content to its modern location within SDK_ROOT
          # This is where sdkmanager will primarily reside
          mv /tmp/android-cmdline-tools-extracted/cmdline-tools/cmdline-tools "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          echo "Moved cmdline-tools to $ANDROID_SDK_ROOT/cmdline-tools/latest."

          # Create a symbolic link for sdkmanager from its modern location to the old 'tools/bin' path
          # This directly addresses Buildozer's specific path expectation
          ln -s "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" "$ANDROID_SDK_ROOT/tools/bin/sdkmanager"
          echo "Symlinked sdkmanager to $ANDROID_SDK_ROOT/tools/bin/sdkmanager."

          # Clean up temporary extraction directory
          rm -rf /tmp/android-cmdline-tools-extracted
          
          # Update PATH for sdkmanager to be found (both old and new locations)
          echo "PATH=$ANDROID_SDK_ROOT/tools/bin:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools:$PATH" >> $GITHUB_ENV
          export PATH="$ANDROID_SDK_ROOT/tools/bin:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools:$PATH" # For current shell
          echo "Current PATH: $PATH"

          # Create licenses directory and accept licenses directly
          echo "Accepting Android SDK licenses by creating license file..."
          mkdir -p "$ANDROID_SDK_ROOT/licenses"
          # These are common license hashes. Add more if new ones appear in error logs.
          echo "8933cc444bbd51ba6c970b55a4087e1e8557e4e1" > "$ANDROID_SDK_ROOT/licenses/android-sdk-licenses"
          echo "d975f743f9cdb82fc1498d32dc2c07937dd647f9" >> "$ANDROID_SDK_ROOT/licenses/android-sdk-licenses"
          echo "24333f8a63b6825ea9c65dab8d159f633a59d156" >> "$ANDROID_SDK_ROOT/licenses/android-sdk-licenses"
          echo "68561a6374823293021a8a43fcc41b12b6f483ec" >> "$ANDROID_SDK_ROOT/licenses/android-sdk-licenses"
          echo "e06d5069657a6e3a990098860a3832c668746c36" >> "$ANDROID_SDK_ROOT/licenses/android-sdk-licenses"
          echo "All SDK package licenses accepted (via file creation)."

          # Install specific Android SDK components into the designated SDK_ROOT
          # Use the sdkmanager with --sdk_root flag to ensure installation in the correct place
          echo "Installing platform-tools, platforms;android-33, build-tools;33.0.2, and build-tools;36.0.0..."
          # Use the symlinked sdkmanager path
          "$ANDROID_SDK_ROOT/tools/bin/sdkmanager" \
            --sdk_root="$ANDROID_SDK_ROOT" \
            "platform-tools" \
            "platforms;android-33" \
            "build-tools;33.0.2" \
            "build-tools;36.0.0" || true # Include 36.0.0 as it was requested by the error
          echo "SDK components installation complete."

          # Verify installation (for debugging)
          echo "Contents of $ANDROID_SDK_ROOT/tools/:"
          ls -lR "$ANDROID_SDK_ROOT/tools/" || true
          echo "Contents of $ANDROID_SDK_ROOT/build-tools/:"
          ls -lR "$ANDROID_SDK_ROOT/build-tools/" || true
          echo "Contents of $ANDROID_SDK_ROOT/platforms/:"
          ls -lR "$ANDROID_SDK_ROOT/platforms/" || true
        shell: bash

      - name: Run Buildozer (Android Debug Build)
        run: buildozer android debug # This command will build the debug APK
        # Buildozer will now find the necessary SDK components set up in its expected location.
        # This step can still take a significant amount of time on the first run due to Buildozer's own downloads.

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: faceapp-apk
          path: bin/*.apk # Upload the generated APK from the 'bin' directory
          retention-days: 5 # Keep the artifact for 5 days
