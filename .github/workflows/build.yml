name: Android APK Build

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch
  workflow_dispatch: # Allows manual triggering of the workflow from GitHub UI

jobs:
  build:
    runs-on: ubuntu-latest # Use a fresh Ubuntu environment for each build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Checkout your repository code

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' # Specify a Python version compatible with Kivy/Buildozer

      - name: Install Buildozer and Cython
        run: pip install buildozer cython # Install Buildozer and Cython (a common dependency)

      # Add Java setup, as it's required for Android SDK tools like sdkmanager
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # Or 'zulu', 'adopt', 'microsoft'
          java-version: '17' # Android SDK often requires Java 11 or 17

      # Use the dedicated GitHub Action to set up Android SDK base components
      # This action handles downloading, extracting, and setting initial paths.
      - name: Setup Android SDK (Base)
        uses: android-actions/setup-android@v2
        with:
          api-level: 33 # Keep this as per your buildozer.spec
          # The action also attempts to accept common licenses.
          accept-android-sdk-licenses: true

      - name: Ensure ANDROID_HOME and PATH are set, and install specific build-tools
        run: |
          # The setup-android action usually sets ANDROID_HOME to $HOME/Android/sdk
          # Re-export these to ensure they are available for subsequent shell commands
          export ANDROID_HOME="$HOME/Android/sdk"
          echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
          # Add cmdline-tools/latest/bin and platform-tools to PATH
          echo "PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$PATH" >> $GITHUB_ENV
          export PATH="$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$PATH" # For current shell
          echo "Current PATH: $PATH"
          echo "Current ANDROID_HOME: $ANDROID_HOME"

          # Attempt to accept all licenses again using sdkmanager
          echo "Attempting to accept all Android SDK licenses via sdkmanager --licenses..."
          yes | "$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager" --licenses || true
          echo "License acceptance attempt complete."

          # Explicitly install build-tools;36.0.0 and platforms;android-36
          # This is crucial as the error explicitly points to build-tools 36.
          echo "Attempting to install platforms;android-36 and build-tools;36.0.0..."
          # Use '|| true' to allow the workflow to continue even if one package isn't found,
          # but we need to observe the logs for successful installation.
          "$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager" "platforms;android-36" "build-tools;36.0.0" || true
          echo "Installation attempt for platforms;android-36 and build-tools;36.0.0 complete."

          # List contents of build-tools directory for debugging
          echo "Contents of $ANDROID_HOME/build-tools/:"
          ls -lR "$ANDROID_HOME/build-tools/" || true
          echo "Contents of $ANDROID_HOME/platforms/:"
          ls -lR "$ANDROID_HOME/platforms/" || true
        shell: bash

      - name: Run Buildozer (Android Debug Build)
        run: buildozer android debug # This command will build the debug APK
        # Buildozer will now find the necessary SDK components set up by the previous steps.
        # This step can still take a significant amount of time on the first run due to Buildozer's own downloads.

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: faceapp-apk
          path: bin/*.apk # Upload the generated APK from the 'bin' directory
          retention-days: 5 # Keep the artifact for 5 days
